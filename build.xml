<?xml version="1.0"?>
<project name="UnderBudget" basedir="." default="all">

	<property name="version" value="2.0a" />

	<property file="build.properties" />

	<!-- Build properties -->
	<property name="debug" value="true" />

	<!-- Source directories -->
	<property name="src.dir"         value="src" />
	<property name="test.dir"        value="test" />
	<property name="data.dir"        value="data" />
	<property name="linux.dir"       value="packaging/linux" />
	<property name="win.dir"         value="packaging/win" />

	<!-- Build output directories -->
	<property name="build.dir"       value="build" />
	<property name="build.class.dir" value="${build.dir}/classes" />
	<property name="build.test.dir"  value="${build.dir}/test" />
	<property name="build.logs.dir"  value="${build.dir}/logs" />
	<property name="build.instr.dir" value="${build.dir}/instr" />
	<property name="build.cov.dir"   value="${build.dir}/coverage" />
	<property name="build.jar.dir"   value="${build.dir}/jar" />

	<!-- Clean up the build directory -->
	<target name="clean" description="Clean build output">
		<delete dir="${build.dir}" />
	</target>

	<!-- Compile the application source -->
	<target name="compile" description="Compile the Java source">
		<mkdir dir="${build.class.dir}" />

		<javac srcdir="${src.dir}" destdir="${build.class.dir}"
			includeantruntime="false" debug="${debug}" />

		<copy todir="${build.class.dir}">
			<fileset dir="${src.dir}"
				excludes="**/*.java" />
		</copy>
	</target>

	<!-- Compile the test source -->
	<target name="compile_tests" depends="compile"
			description="Compile the Java unit test source">
		<mkdir dir="${build.test.dir}" />

		<javac srcdir="${test.dir}" destdir="${build.test.dir}"
				includeantruntime="true">
			<classpath>
				<pathelement location="${build.class.dir}" />
			</classpath>
		</javac>

		<copy todir="${build.test.dir}">
			<fileset dir="${test.dir}"
				excludes="**/*.java" />
		</copy>
	</target>

	<!-- Run the unit tests -->
	<target name="test" depends="compile_tests" description="Run JUnit tests">
		<mkdir dir="${build.logs.dir}" />

		<junit fork="true" haltonfailure="true" printsummary="true">
			<classpath>
				<pathelement location="${build.instr.dir}" />
				<pathelement location="${build.class.dir}" />
				<pathelement location="${build.test.dir}" />
				<pathelement location="${emma.dir}/emma.jar" />
			</classpath>

			<formatter type="plain" />

			<batchtest todir="${build.logs.dir}">
				<fileset dir="${test.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>

			<jvmarg value="-Demma.coverage.out.file=${build.cov.dir}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />
		</junit>
	</target>

	<!-- Instrument source with emma -->
	<target name="instr" depends="compile"
			description="Prepare source for code coverage analysis with emma">
		<fail unless="emma.dir" message="The property emma.dir must be set" />

		<path id="emma.lib">
			<pathelement location="${emma.dir}/emma.jar" />
			<pathelement location="${emma.dir}/emma_ant.jar" />
		</path>

		<taskdef resource="emma_ant.properties" classpathref="emma.lib" />

		<mkdir dir="${build.instr.dir}" />
		<mkdir dir="${build.cov.dir}" />

		<emma>
			<instr instrpath="${build.class.dir}" destdir="${build.instr.dir}"
				metadatafile="${build.cov.dir}/metadata.emma" mode="copy" />
		</emma>
	</target>

	<!-- Run emma code coverage analysis -->
	<target name="coverage" depends="instr, test"
			description="Run unit tests for code coverage analysis">
		<emma>
			<report sourcepath="${src.dir}">
				<fileset dir="${build.cov.dir}">
					<include name="**/*.emma" />
				</fileset>

				<txt outfile="${build.cov.dir}/coverage.txt" />
				<html outfile="${build.cov.dir}/coverage.html" />
			</report>
		</emma>
	</target>

	<!-- Create the CLI jar -->
	<target name="cli" depends="compile" description="Create CLI jar file">
		<mkdir dir="${build.jar.dir}" />
		<jar destfile="${build.jar.dir}/UnderBudgetCli.jar" basedir="${build.class.dir}">
			<manifest>
				<attribute name="Main-Class" value="com.vimofthevine.underbudget.cli.Launcher" />
			</manifest>
		</jar>
	</target>

	<!-- Create the Windows package -->
	<!-- Note that this is untested as I doubt there's much use of the CLI version
		 on Windows. When the GUI version is released this will be tested/updated -->
	<target name="pkg-win" depends="cli" description="Create a Windows package">
		<mkdir dir="${build.dir}/win/underbudget" />
		<copy todir="${build.dir}/win/underbudget">
			<fileset dir="${build.jar.dir}" includes="*.jar" />
			<fileset dir="${win.dir}" includes="*.bat" />
		</copy>
		<mkdir dir="${build.dir}/win/underbudget/data" />
		<copy todir="${build.dir}/win/underbudget/data">
			<fileset dir="${data.dir}" includes="*.properties" />
		</copy>
		<delete file="${build.dir}/underbudget-${version}.zip" failonerror="false" />
		<zip destfile="${build.dir}/underbudget-${version}.zip" basedir="${build.dir}/win" />
	</target>

	<!-- Create the Unix package -->
	<target name="pkg-unix" depends="cli" description="Create a Unix package">
		<delete file="${build.dir}/underbudget-${version}.tar.gz" failonerror="false" />
		<tar destfile="${build.dir}/underbudget-${version}.tar.gz" compression="gzip">
			<tarfileset dir="${build.jar.dir}" prefix="underbudget"
				includes="*.jar" />
			<tarfileset dir="${linux.dir}" prefix="underbudget"
				includes="underbudgetcli.sh" filemode="775" />
			<tarfileset dir="${data.dir}" prefix="underbudget/data"
				includes="*.properties" />
		</tar>
	</target>

	<!-- Run the application -->
	<target name="run" depends="cli" description="Run application out of build directory">
		<java jar="${build.jar.dir}/${ant.project.name}.jar" fork="true">
			<env key="UNDERBUDGET_HOME" value="data" />
		</java>
	</target>

	<!-- Create all packages -->
	<target name="all" depends="clean,pkg-unix,pkg-win"
		description="Create all packages" />

</project>
